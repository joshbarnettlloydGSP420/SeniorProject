#pragma once

#include "InputManager.h"
#include "LightManager.h"
//#include "Mesh.h"		// can't get to render
#include "Model.h"		// Taken from my game to see if camera works
#include "Sprite2D.h"
//#include "HUD.h"
#include "Camera.h"
#include "HavokCore.h"
#include "Player.h"
#include "Enemy_Base.h"

//////////////////////////////////////////////////////////////////////////
// Class to call all the needed stuff for the game
// - Havok
// - Model3D
//////////////////////////////////////////////////////////////////////////
class Game
{
private:
	// Class Creation
	InputManager*		input;
	LightManager*		light;
	Model*				model_house;
	Sprite2D			sprite_test;
	Camera*				camera;

	IDirect3DDevice9*	device;

	//////////////////////////////////////////////////////////////////////////
	// Shape Variables														//
	//////////////////////////////////////////////////////////////////////////
	UINT						Length;

	//////////////////////////////////////////////////////////////////////////
	// 3D Variables													        //
	//////////////////////////////////////////////////////////////////////////

	// Camera
	D3DXVECTOR3						eyePos;
	D3DXVECTOR3						lookAt;
	D3DXVECTOR3						upVec;

	float							mCameraRotation;
	float							mCameraRadius;
	float							mCameraHeight;

	//////////////////////////////////////////////////////////////////////////
	// Font Variables														//
	//////////////////////////////////////////////////////////////////////////
	//ID3DXFont*						m_pD3DFont;		// Font Object

	//////////////////////////////////////////////////////////////////////////
	// Sprite Variables														//
	//////////////////////////////////////////////////////////////////////////
	ID3DXSprite*					m_pD3DSprite;	// Sprite Object

	//////////////////////////////////////////////////////////////////////////
	// Havok																//
	//////////////////////////////////////////////////////////////////////////
	HavokCore*						havok;

	//////////////////////////////////////////////////////////////////////////
	// Timer																//
	//////////////////////////////////////////////////////////////////////////
	hkStopwatch						stopWatch;
	hkReal							lastTime;

	//////////////////////////////////////////////////////////////////////////
	// Player																//
	//////////////////////////////////////////////////////////////////////////
	Player*					player;

	//////////////////////////////////////////////////////////////////////////
	// Player																//
	//////////////////////////////////////////////////////////////////////////
	Enemy_Base*				enemy;

	// Basic
	IDirect3DVertexBuffer9*		mesh_vb;
	IDirect3DIndexBuffer9*		mesh_ib;

	// Vertex
	struct Vertex
	{
		D3DXVECTOR3				pos;
		D3DXVECTOR3				norm;
		D3DXVECTOR2				uv;
	};

public:
	Game(void);
	~Game(void);

	void Init(InputManager* input, IDirect3DDevice9* m_pD3DDevice, HWND* hWnd );
	void Update( float dt);
	void Render();
	void Shutdown();

	//void createGroundBox(hkpWorld* world);

	void playerUpdate(float dt);
};

